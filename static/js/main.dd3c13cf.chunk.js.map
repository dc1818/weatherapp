{"version":3,"sources":["Formpage.js","Weathertemplate.js","Mainpage.js","serviceWorker.js","index.js"],"names":["Formpage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayLabel","enterTyped","displayformPage","inputValue","checkForEnter","bind","assertThisInitialized","changeDisplayLabelStatus","updateInput","inputbox","React","createRef","mounted","document","addEventListener","console","log","displayStatus","require","removeEventListener","event","keyCode","setState","displayFormPage","current","focus","value","length","font","target","infolabel","_this2","react_default","a","createElement","id","class","onClick","style","fontSize","overflow","ref","onChange","onBlur","autoFocus","spellcheck","type","maxlength","src","Component","Weathertemplate","shortForecast","location","html","loadingBarProgress","fetch","concat","response","json","data","results","locations","locationData","displayLatLng","lat","lng","latlong","city","adminArea5","country","adminArea1","mode","initialapi","initialapidata","status","dataReady","forecasturl","properties","forecast","forecastapi","forecastdata","periods","period","name","temperature","temperatureUnit","windDirection","windSpeed","runApis","runGeoCodeApi","then","result","runWeatherApi","_this3","formPageStatus","disabled","Mainpage","displayWeatherInformation","getFormSubmitStatus","getInputValue","getFormPageStatus","checkForDataReady","isTrue","input","src_Formpage","src_Weathertemplate","displayTemplate","Boolean","window","hostname","match","ReactDOM","render","src_Mainpage","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd3c13cf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './css/initialstyle.css';\r\n\r\n\r\n\r\n\r\n\r\nclass Formpage extends React.Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n\r\n      this.state = {displayLabel:true,enterTyped:false,displayformPage:true,inputValue :\"\"};\r\n      this.checkForEnter = this.checkForEnter.bind(this);\r\n      this.changeDisplayLabelStatus = this.changeDisplayLabelStatus.bind(this);\r\n      this.updateInput = this.updateInput.bind(this);\r\n      this.inputbox = React.createRef();\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  componentDidMount()\r\n  {\r\n    this.mounted=true;\r\n\r\n      document.addEventListener('keydown',this.checkForEnter);\r\n      console.log(this.props.displayStatus);\r\n      require ('./css/initialstyle.css');\r\n\r\n\r\n\r\n     //ReactDOM.findDOMNode(this).addEventListener('nv-event', this._handleNVEvent);\r\n  }\r\n  componentWillUnmount()\r\n  {\r\n      document.removeEventListener('keydown',this.checkForEnter);\r\n  }\r\n\r\n  checkForEnter(event)\r\n  {\r\n      if(event.keyCode===13 && this.state.inputValue!==\"\")\r\n      {\r\n          this.setState({enterTyped:true,displayFormPage:false});\r\n          this.props.displayStatus(false);\r\n\r\n          this.props.inputValue(this.state.inputValue);\r\n          console.log(this.state.enterTyped);\r\n      }\r\n      else\r\n      {\r\n\r\n          this.inputbox.current.focus();\r\n\r\n\r\n      }\r\n\r\n  }\r\n  changeDisplayLabelStatus(value)\r\n  {\r\n    if(this.state.inputValue===\"\")\r\n    {\r\n      this.setState({displayLabel:true});\r\n    }\r\n\r\n\r\n    this.setState({displayLabel:value});\r\n\r\n  }\r\n\r\n  updateInput(event)\r\n  {\r\n\r\n\r\n      if(this.state.inputValue.length>15)\r\n      {\r\n        this.setState({font:'400%'});\r\n        console.log(this.state.inputValue.length);\r\n      }\r\n      else if(this.state.inputValue.length===0)\r\n      {\r\n        this.setState({font:'1000%'});\r\n      }\r\n    this.setState({inputValue:event.target.value});\r\n}\r\n\r\n\r\n\r\n  render()\r\n  {\r\n    let infolabel;\r\n\r\n    if(this.state.displayLabel===true)\r\n    {\r\n        infolabel = <label id = \"citylabel\">Enter your location</label>\r\n    }\r\n\r\n\r\n\r\n    return(<div class = \"mainpage\"><div id = \"pagetitle\">Weather Finder</div><div id = \"myname\">App by Dalton Cornwell</div>\r\n    <div onClick = {()=>{this.changeDisplayLabelStatus(true)}} id = \"entirepage\">\r\n    </div>\r\n    <div id = \"labelcontainer\">\r\n      {infolabel}\r\n    </div>\r\n    <div id = \"inputbox\">\r\n\r\n    <textarea style = {{fontSize:this.state.font,overflow:\"hidden\"}} ref = {this.inputbox} onClick = {()=>{this.changeDisplayLabelStatus(false)}} onChange = {(event)=>{this.changeDisplayLabelStatus(false,this); this.updateInput(event);}} onBlur = {()=>{this.changeDisplayLabelStatus(true)}}   autoFocus spellcheck=\"false\"  id = \"cityinput\" type = \"text\" maxlength = \"50\" ></textarea>\r\n    {console.log(this.state.inputValue)}\r\n    </div>\r\n    <script src = 'mainscript.js'>\r\n    </script>\r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default Formpage\r\n","import React from 'react';\r\nimport './css/weathertemplate.css';\r\nimport LoadingBar from 'react-top-loading-bar'\r\n\r\n\r\n\r\n\r\nconst geocodekey  = \"UnKAjeHAB6sFQGrli30eJCYQis96tuaO\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function pickApartForecast(forecast,locationData)\r\n{\r\n    //const location = await reverseGeoCode(coords);\r\n      const country = locationData.adminArea1;\r\n      const state = locationData.adminArea3;\r\n      const county = locationData.adminArea4;\r\n      const city = locationData.adminArea5;\r\n      const street = locationData.street;\r\n      const zipcode = locationData.postalCode;\r\n      let locations = {street:street,city:city,state:state,zipcode:zipcode,county:county,country:country};\r\n      console.log(street);\r\n      return forecast.shortForecast;\r\n}\r\n\r\nasync function reverseGeoCode(geocode)\r\n{\r\n  const reverseGeoCodeApi = await fetch(`https://open.mapquestapi.com/geocoding/v1/reverse?key=${geocodekey}&location=${geocode[1]},${geocode[0]}&includeRoadMetadata=true&includeNearestIntersection=true`);\r\n  const reverseGeoData = await reverseGeoCodeApi.json();\r\n  console.log(reverseGeoData);\r\n  return await reverseGeoData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Weathertemplate extends React.Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {shortForecast:null,location:this.props.location,html:<div></div>};\r\n  }\r\n\r\n  async runGeoCodeApi()\r\n  {\r\n   //const response = await fetch(websitetemplate+`&location=${address}`);\r\n     this.setState({loadingBarProgress:0});\r\n   const response = await fetch(`https://www.mapquestapi.com/geocoding/v1/address?key=UnKAjeHAB6sFQGrli30eJCYQis96tuaO&location=${this.props.location}`);\r\n   const data = await response.json();\r\n   const locationData = await data.results[0].locations[0]\r\n   console.log(locationData);\r\n\r\n\r\n  //let lat = await locationData.displayLatLng.lat;\r\n   //let long = await locationData.displayLatLng.lng;\r\n  let latlong = await [locationData.displayLatLng.lat,locationData.displayLatLng.lng];\r\n  this.setState({city:locationData.adminArea5,country:locationData.adminArea1});\r\n  return latlong\r\n}\r\n\r\n\r\n  async runWeatherApi(latlong)\r\n  {\r\n    const initialapi = await fetch(`https://api.weather.gov/points/${latlong[0]},${latlong[1]}`,{mode:\"cors\"});\r\n    const initialapidata = await initialapi.json();\r\n    if(initialapidata.status===404)\r\n    {\r\n        console.log(initialapidata.status);\r\n      this.setState({shortForecast:404});\r\n      this.props.dataReady(true);\r\n      //this.requireCSSCheck();\r\n      //this.setHtml();\r\n    }\r\n    else\r\n    {\r\n      const forecasturl = initialapidata.properties.forecast;\r\n      const forecastapi = await fetch(forecasturl);\r\n      const forecastdata = await forecastapi.json();\r\n      const period = await forecastdata.properties.periods[0];\r\n      console.log(period);\r\n      let shortForecast = period.shortForecast;\r\n      //let shortForecast = \"sunny\";\r\n      this.setState({name:period.name,shortForecast:shortForecast,temperature:period.temperature,temperatureUnit:period.temperatureUnit,windDirection:period.windDirection,windSpeed:period.windSpeed});\r\n      this.props.dataReady(true);\r\n      console.log(this.state);\r\n      //this.requireCSSCheck();\r\n      //this.setHtml();\r\n\r\n      //this.requireCSSCheck(\"Sunny\");\r\n      //this.setHtml(\"Sunny\");\r\n      return period;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  componentWillMount()\r\n  {\r\n\r\n    //console.log(this.state.location);\r\n    console.log('first mount');\r\n    console.log(this.state.location);\r\n\r\n\r\n  this.runApis();\r\n}\r\ncomponentWillUnmount()\r\n{\r\n  this.setState({html:null,shortForecast:\"\"});\r\n\r\n}\r\n\r\n\r\n    runApis()\r\n  {\r\n\r\n    this.runGeoCodeApi().then((result)=>{this.runWeatherApi(result)});\r\n    console.log(this.state.location);\r\n    this.setState({loadingBarProgress:100});\r\n  }\r\n\r\n\r\n  getLocation()\r\n  {\r\n      console.log('get location');\r\n    return this.props.location;\r\n  }\r\n\r\n\r\n\r\n  render()\r\n  {\r\n    //return(<div id = \"container\"><div id = \"city\">{this.state.city}</div></div>);\r\n    console.log(this.props.location);\r\n    if(this.state.shortForecast===404 || this.state.city===\"\")\r\n    {\r\n        console.log('render first if loaded');\r\n      return (<div id = \"error\">No weather data found<button onClick = {()=>{this.props.formPageStatus(true);this.setState({location:null,shortForecast:null,country:null});}} id = \"returnbuttonerror\">Return</button></div>);\r\n    }\r\n    else if(this.props.location===null)\r\n    {\r\n\r\n      return null;\r\n    }\r\n    else if(this.props.dataReady===false)\r\n    {\r\n      console.log('api running');\r\n      return <div>LOADING</div>\r\n    }\r\n    else\r\n    {\r\n        if(this.state.shortForecast!==null)\r\n        {\r\n\r\n          console.log('render last else loaded');\r\n          return(<div id = \"container\">{this.state.html}<div id = \"weatherblurb\">Your weather in:</div><div id = \"city\">{this.state.city}</div><div id = \"country\">{this.state.country}</div><div id = \"shortForecast\">{this.state.shortForecast}</div><div id = \"temperature\">{this.state.temperature}&#176;<span id = \"temperatureunit\">{this.state.temperatureUnit}</span></div><div id = \"returncontainer\"><button onClick = {()=>{this.props.formPageStatus(true);this.setState({location:null,shortForecast:null,country:null});}} id = \"returnbutton\">Return</button></div></div>);\r\n        }\r\n        else\r\n        {\r\n          return (<div class = \"mainpage\">\r\n          <div onClick = {()=>{this.changeDisplayLabelStatus(true)}} id = \"entirepage\">\r\n          </div>\r\n          <div id = \"loadingBar\" >LOADING</div>\r\n          <div id = \"labelcontainer\">\r\n            <label id = \"citylabel\">Enter your location</label>\r\n          </div>\r\n          <div id = \"inputbox\">\r\n\r\n          <textarea disabled={true} style = {{fontSize:this.state.font,overflow:\"hidden\"}} ref = {this.inputbox} onClick = {()=>{this.changeDisplayLabelStatus(false)}} onChange = {(event)=>{this.changeDisplayLabelStatus(false,this); this.updateInput(event);}} onBlur = {()=>{this.changeDisplayLabelStatus(true)}}   autoFocus spellcheck=\"false\"  id = \"cityinput\" type = \"text\" maxlength = \"50\" ></textarea>\r\n          {console.log(this.state.inputValue)}\r\n          </div>\r\n          <script src = 'mainscript.js'>\r\n          </script>\r\n          </div>)\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Weathertemplate\r\n","import React from 'react';\r\n\r\n//import './css/initialstyle.css';\r\nimport Formpage from './Formpage.js';\r\nimport Weathertemplate from './Weathertemplate.js';\r\n\r\n\r\n\r\nclass Mainpage extends React.Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {displayFormPage:true,displayWeatherInformation:false,inputValue:null,dataReady:false};\r\n    this.getFormSubmitStatus = this.getFormSubmitStatus.bind(this);\r\n    this.getInputValue = this.getInputValue.bind(this);\r\n    this.getFormPageStatus = this.getFormPageStatus.bind(this);\r\n    this.checkForDataReady = this.checkForDataReady.bind(this);\r\n  }\r\n\r\n  getFormSubmitStatus(isTrue)\r\n  {\r\n      this.setState({displayFormPage:isTrue});\r\n\r\n  }\r\n\r\n  getInputValue(input)\r\n  {\r\n      this.setState({inputValue:input});\r\n  }\r\n\r\n  getFormPageStatus(status)\r\n  {\r\n    this.setState({displayFormPage:status,inputValue:null});\r\n\r\n    if(this.state.displayFormPage===true)\r\n    {\r\n      this.setState({inputValue:null});\r\n    }\r\n  }\r\n  checkForDataReady(value)\r\n  {\r\n    console.log('check if api data is ready to be displayed');\r\n    if(value)\r\n    {\r\n      this.setState({dataReady:true});\r\n    }\r\n  }\r\n\r\n  render()\r\n  {\r\n    if(this.state.displayFormPage===true)\r\n    {\r\n      return (<Formpage displayStatus = {this.getFormSubmitStatus} inputValue = {this.getInputValue} />);\r\n    }\r\n    else if(this.state.displayFormPage===false && this.state.inputValue!==null)\r\n    {\r\n\r\n        console.log(this.state.inputValue);\r\n      return (<Weathertemplate location = {this.state.inputValue} dataReady = {this.checkForDataReady} displayTemplate = {this.state.dataReady} formPageStatus = {this.getFormPageStatus}/>);\r\n    }\r\n    else{\r\n      return null;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\nexport default Mainpage;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/initialstyle.css';\nimport Mainpage from './Mainpage.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Mainpage />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}